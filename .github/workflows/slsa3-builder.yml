name: Ko Builder

permissions:
  contents: read

env:
  # Builder
  BUILDER_BINARY: builder
  # Registries.
  DOCKER_REGISTRY: docker.io
  GITHUB_REGISTRY: ghcr.io

###################################################################
#                                                                 #
#            Input and output argument definitions                #
#                                                                 #
###################################################################
on:
  workflow_call:
    secrets:
      password:
        description: "Password to log in the registry"
        required: true
    inputs:
      envs:
        description: "Environment variables to pass to the builder"
        required: false
        type: string
      args:
        description: "Arguments to pass to the 'ko publish'"
        required: false
        type: string
      username:
        description: "Username to log in the registry"
        required: true
        type: string
    outputs:
      image:
        description: "The full path to the generated container image"
        value: ${{ jobs.build-release.outputs.image }}


jobs:
  detect-env:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Needed to detect the current reusable repository and ref.
      contents: read
    outputs:
      builder_repo: ${{ steps.detect.outputs.builder_repo }}
      builder_ref: ${{ steps.detect.outputs.builder_ref }}
    steps:
      - name: Detect the builder ref
        id: detect
        shell: bash
        run: | 
          status_code=$(curl -sS -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=${{ github.repository }}/ko-builder" -o jwt.json -w '%{http_code}')
          if [[ $status_code -ne 200 ]]; then
              error_msg=$(jq -r .message jwt.json 2>/dev/null || echo 'unknown error')
              echo "Failed to get OIDC token from GitHub, response $status_code: $error_msg"
              exit 1;
          fi
          export WORKFLOW_REF=$(cat jwt.json | jq -r '.value' | cut -d "." -f2 | base64 -d | jq -r '.job_workflow_ref')
          if [ -z $WORKFLOW_REF ]; then
            echo "OIDC token parsing failure: job_workflow_ref could not be retrieved"
            exit 1;
          fi
          echo "::set-output name=builder_repo::$(echo $WORKFLOW_REF | cut -d "@" -f1 | cut -d '/' -f1-2)"
          echo "::set-output name=builder_ref::$(echo $WORKFLOW_REF | cut -d "@" -f2)"
          
  builder:
    runs-on: ubuntu-latest
    needs: detect-env
    permissions:
      contents: read
    outputs:
      builder-sha256: ${{ steps.builder-gen.outputs.sha256 }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v2.3.4
        with:
          fetch-depth: 0
          repository: "${{ needs.detect-env.outputs.builder_repo }}"
          ref: "${{ needs.detect-env.outputs.builder_ref }}"

      - name: Set up golang environment
        uses: actions/setup-go@f6164bd8c8acb4a71fb2791a8b6c4024ff038dab # v2.1.3
        with:
          go-version: 1.17

      - name: Download dependencies
        shell: bash
        run: |
          set -euo pipefail
          #TODO(reproducible)
          go mod vendor

      # TODO(hermeticity) OS-level.
      # - name: Disable hermeticity
      # uses: slsa/hermeticity@xxx
      #   with:
      #     to-state: enabled

      - name: Build builder
        shell: bash
        id: builder-gen
        env:
          BUILDER_BINARY: "${{ env.BUILDER_BINARY }}"
        run: |
            set -euo pipefail

            # https://go.dev/ref/mod#build-commands.
            go build -mod=vendor -o "$BUILDER_BINARY"
            BUILDER_DIGEST=$(sha256sum "$BUILDER_BINARY" | awk '{print $1}')
            echo "::set-output name=sha256::$BUILDER_DIGEST"
            echo "hash of $BUILDER_BINARY is $BUILDER_DIGEST"

      - name: Upload the builder
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v2.3.1
        with:
          name: "${{ env.BUILDER_BINARY }}"
          path: "${{ env.BUILDER_BINARY }}"
          if-no-files-found: error
          retention-days: 5
      
  ###################################################################
  #                                                                 #
  #                 Build dry to resolve variables                  #
  #                                                                 #
  ###################################################################
  build-dry:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [builder]
    env:
      UNTRUSTED_ARGS: "${{ inputs.args }}"
      UNTRUSTED_ENVS: "${{ inputs.envs }}"
      BUILDER_HASH: "${{ needs.builder.outputs.builder-sha256 }}"
    outputs:
      command: ${{ steps.build-dry.outputs.command }}
      envs: ${{ steps.build-dry.outputs.envs }}
    
    steps:
      - name: Checkout the repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v2.3.4
        with:
          fetch-depth: 0
      
      - name: Download builder
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v2.1.0
        with:
          name: "${{ env.BUILDER_BINARY }}"
      
      - name: Verify builder
        env:
          BUILDER_BINARY: "${{ env.BUILDER_BINARY }}"
        run: |
          set -euo pipefail

          echo "hash of builder should be $BUILDER_HASH"
          COMPUTED_HASH=$(sha256sum "$BUILDER_BINARY" | awk '{print $1}')
          echo "builder hash computed is $COMPUTED_HASH"

          # Compare hashes. Explicit exit to be safe.
          # TODO: remove the builder as well.
          echo "$BUILDER_HASH $BUILDER_BINARY" | sha256sum --strict --check --status || exit -2
    
          # Make the builder executable.
          chmod a+x "$BUILDER_BINARY"
  
      - name: Dry build
        id: build-dry
        env:
          BUILDER_BINARY: "${{ env.BUILDER_BINARY }}"
        run: |
          set -euo pipefail
          
          # TODO: verify hash
          echo "running the builder $BUILDER_BINARY with hash $BUILDER_HASH"
          echo ./"$BUILDER_BINARY" --dry-run --args "$UNTRUSTED_ARGS" --envs "$UNTRUSTED_ENVS"
          # Note: this will print command and envs.
          ./"$BUILDER_BINARY" predicate --dry-run --args "$UNTRUSTED_ARGS" --envs "$UNTRUSTED_ENVS"
  
  ###################################################################
  #                                                                 #
  #                       Build the project                         #
  #                                                                 #
  ###################################################################
  build-release:
    runs-on: ubuntu-latest
    needs: [builder]
    permissions:
      contents: read
      packages: write
    env:
      UNTRUSTED_PASSWORD: ${{ secrets.password }}
      UNTRUSTED_USERNAME: ${{ inputs.username }}
      UNTRUSTED_ARGS: ${{ inputs.args }}
      BUILDER_HASH: "${{ needs.builder.outputs.builder-sha256 }}"
    outputs:
      image: ${{ steps.build-push.outputs.image }}
    steps:
      #TODO: step to verify registry
      - name: Checkout
        uses: actions/checkout@v2
        
       # Note: downlaoading and pinning the download seems better
       # than adding this dependency. Need to look how the install works
       # remko/dsadmin/blob/7a6939179bc56b1be28cada040f2b4a148e3e14a/.github/workflows/publish-release.yml
      - name: Setup Ko
        uses: imjasonh/setup-ko@v0.4
    
      - name: Login
        run: |
          set -euo pipefail
          
          # TODO: parse env variables and extract KO_DOCKER_REPO. This variable is always
          # set. If there's a '/', the registry will be the first part; otherwise it
          # will be set to docker.io
          ko login "${{ env.DOCKER_REGISTRY }}" -u "$UNTRUSTED_USERNAME" -p "$UNTRUSTED_PASSWORD"
  
      - name: Download builder
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v2.1.0
        with:
          name: "${{ env.BUILDER_BINARY }}"

      - name: Verify builder
        env:
          BUILDER_BINARY: "${{ env.BUILDER_BINARY }}"
        run: |
          set -euo pipefail

          echo "hash of builder should be $BUILDER_HASH"
          COMPUTED_HASH=$(sha256sum "$BUILDER_BINARY" | awk '{print $1}')
          echo "builder hash computed is $COMPUTED_HASH"

          # Compare hashes. Explicit exit to be safe.
          # TODO: remove the builder as well.
          echo "$BUILDER_HASH $BUILDER_BINARY" | sha256sum --strict --check --status || exit -2
    
          # Make the builder executable.
          chmod a+x "$BUILDER_BINARY"
          
      - name: Build and push
        id: build-push
        env:
          BUILDER_BINARY: "${{ env.BUILDER_BINARY }}"
        run: |
          set -euo pipefail
          
          #TODO: run
          echo ./"$BUILDER_BINARY" --args "$UNTRUSTED_ARGS" --envs "$UNTRUSTED_ENVS"

          # Note: this will print command and envs.
          ./"$BUILDER_BINARY" predicate --dry-run --args "$UNTRUSTED_ARGS" --envs "$UNTRUSTED_ENVS"
          # Note: this will be done in Go via an exec and to set up env variables.
          # Note 2: we will use a dry-run to generate the command for provenance in a separate job.
          # Note 3: we will use the value provided by the user and set env autoatically, so we
          # won't need to set this explicitely.
          export KO_DOCKER_REPO="${{ env.DOCKER_REGISTRY }}/$UNTRUSTED_USERNAME"
          
          #TODO: take these arguments from args and use exec in Go.
          IMAGE=$(ko publish $UNTRUSTED_ARGS)
          
          echo "::set-output name=image::$IMAGE"
  
  ###################################################################
  #                                                                 #
  #                 Generate the SLSA provenance                    #
  #                                                                 #
  ###################################################################
  provenance:
    runs-on: ubuntu-latest
    needs: [build-dry,build-release]
    permissions:
      packages: write
      contents: read
      id-token: write
    env:
      UNTRUSTED_IMAGE: "${{ needs.build-release.outputs.image }}"
      UNTRUSTED_COMMAND: "${{ needs.build-dry.outputs.command }}"
      UNTRUSTED_ENVS: "${{ needs.build-dry.outputs.envs }}"
      UNTRUSTED_PASSWORD: "${{ secrets.password }}"
      UNTRUSTED_USERNAME: "${{ inputs.username }}"
      
    steps:
      - name: Generate predicate
        id: gen-predicate
        env:
          BUILDER_BINARY: "${{ env.BUILDER_BINARY }}"
        run: |
          set -euo pipefail
          
          echo "image is: $UNTRUSTED_IMAGE"
          
          #TODO: generate PROJECT dynamically using the URL
          # testing. Use a local file containing provenance.
          IMAGE_SHA256=$(echo $UNTRUSTED_IMAGE | cut -d "@" -f2 | cut -d ":" -f2)
          IMAGE_NAME=$(echo $UNTRUSTED_IMAGE | cut -d "@" -f1)
                    
          
          echo "::set-output name=image::$UNTRUSTED_IMAGE"

          ./"$BUILDER_BINARY" predicate --artifact-name "$IMAGE_NAME" \
            --digest "$IMAGE_SHA256" --command "$UNTRUSTED_COMMAND" \
            --env "$UNTRUSTED_ENVS"
          
      # Note: here we need packages permissions
      # TODO: here we may use each ecosystem's login action instead,
      # or use cosign login
      - uses: sigstore/cosign-installer@d6a3abf1bdea83574e28d40543793018b6035605
      - name: Login
        run: |
          set -euo pipefail
          
          cosign login "${{ env.DOCKER_REGISTRY }}" -u "$UNTRUSTED_USERNAME" -p "$UNTRUSTED_PASSWORD"
          
      #- uses: sigstore/cosign-installer@d6a3abf1bdea83574e28d40543793018b6035605
      - name: Upload
        env:
          UNTRUSTED_PREDICATE: "${{ steps.gen-predicate.outputs.filename }}"
          UNTRUSTED_IMAGE: "${{ steps.gen-predicate.outputs.image }}"
        run: |
          set -euo pipefail
            
          echo cosign attest --predicate "$UNTRUSTED_PREDICATE" \
            --type "slsaprovenance" \
            --force \
            "$UNTRUSTED_IMAGE"
            
          COSIGN_EXPERIMENTAL=1 cosign attest --predicate "$UNTRUSTED_PREDICATE" \
            --type "slsaprovenance" \
             --force \
            "$UNTRUSTED_IMAGE"

          
         
